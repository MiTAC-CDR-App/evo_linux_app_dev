/*------------------------------------------------------------------------------------------------------------*
 *                                                                                                            *
 * Copyright      2020 MiTAC International Corp.                                                              *
 *                                                                                                            *
 *------------------------------------------------------------------------------------------------------------*
 * PROJECT     :  Common Framework                                                                            *
 * BINARY NAME :  libBase                                                                                     *
 * FILE NAME   :  log/AutoSerialFileLogger.h                                                                  *
 * CREATED BY  :  Huah Tu <huah.tu@mic.com.tw>                                                                *
 * CREATED DATE:  04/16/20 (MM/DD/YY)                                                                         *
 * DESCRIPTION :  Auto serialed file logger (log filename is generated by serial number procID, date time).   *
 *------------------------------------------------------------------------------------------------------------*/

#ifndef _LOG_AUTO_SERIAL_FILE_LOGGER_H
#define _LOG_AUTO_SERIAL_FILE_LOGGER_H

// Standard includes
#include <stdint.h>
#include <stdio.h>
#include <string>
// libBase includes
#include <container/List.h>
#include <osal/OsalMutex.h>
#include <log/FileBasedLogger.h>

class PeriodicTask;

// Max 10000 files for better index control, and it is not realistic to have over 10000 log files.
class AutoSerialFileLogger : public FileBasedLogger
{
  public:
    // The log file name is baseName + "-XXXXX-[procID]-YYYYMMDD-hhmmss.log".
    AutoSerialFileLogger(const char *fullLogDirPath, const char *baseName, int maxTotalSizeInMB = 10);

    /*!
     * Destructor.
     */
    virtual ~AutoSerialFileLogger();

    void enableCutSizeCheck(int cutSize);

  protected:
    /* Implementation for SysLogger */
    virtual int start(void);
    virtual void stop(void);
    virtual void cleanupOldFiles(int lastClosedFileSize);
    virtual std::string generateNextFilename(void);

  private:
    char *baseName;
    unsigned lenBaseName;
    int cutSize = 0;
    int nextNdx = 1;
    int oldestNdx = 1;
    size_t maxTotalSize;
    int totalLogs = 0;
    size_t totalLogSize = 0;
    int64_t logStartDT;
    PeriodicTask *periodicCheckTask = 0;

    // void openFileAndCleanupOldLogs(void);
    //
    void checkAndCut(void);
    static int _checkAndCut(void *context);
    void _cleanupOldFiles(List<std::string> &files);
    bool _removeOneFile(List<std::string> &files, int ndx);
    int _parseNdx(const char *filename);
};

#endif//_LOG_AUTO_SERIAL_FILE_LOGGER_H
